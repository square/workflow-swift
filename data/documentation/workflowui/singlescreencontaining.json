{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/WorkflowUI\/documentation\/WorkflowUI"]]},"abstract":[{"text":"Defines a type that semantically ‘contains’ a ","type":"text"},{"code":"Screen","type":"codeVoice"},{"text":" instance.","type":"text"}],"variants":[{"paths":["\/documentation\/workflowui\/singlescreencontaining"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/AnyScreen","doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/ScreenViewController","doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/WorkflowHostingController"],"title":"Conforming Types","type":"conformingTypes"}],"topicSections":[{"identifiers":["doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/SingleScreenContaining\/primaryScreen"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"},{"identifiers":["doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/SingleScreenContaining\/findInnermostPrimaryScreen()"],"generated":true,"title":"Instance Methods","anchor":"Instance-Methods"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleScreenContaining","kind":"identifier"}],"platforms":["iOS"]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"The motivating use case for this protocol is to expose a means of unifying various types that provide"},{"type":"text","text":" "},{"type":"text","text":"access to "},{"type":"codeVoice","code":"Screen"},{"type":"text","text":"s in a way that can be used without knowing their static type."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, without this protocol, we cannot identify that a ","type":"text"},{"code":"UIViewController","type":"codeVoice"},{"text":" is an instance of","type":"text"},{"text":" ","type":"text"},{"code":"ScreenViewController<S>","type":"codeVoice"},{"text":" without specifying the associated screen’s type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func makeUninspectableScreenVC() -> UIViewController {","  struct LocalScreen: Screen { ... } \/\/ `LocalScreen` symbol is only visible in this function","  return ScreenViewController(screen: LocalScreen(), environment: .empty)","}","","let isSVC = makeUninspectableScreenVC() is ScreenViewController<???> \/\/ no generic can be specified here that makes this true"]},{"inlineContent":[{"text":"Conceptually this API is intended to enable runtime traversal of a hierarchy of ","type":"text"},{"type":"codeVoice","code":"SingleScreenContaining"},{"text":" ","type":"text"},{"text":"instances such that an ‘inner’ ","type":"text"},{"type":"codeVoice","code":"Screen"},{"text":" value can be found at runtime. For example, if we had an instance","type":"text"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"type":"codeVoice","code":"ScreenViewController<AnyScreen>"},{"text":" but only statically knew it was a ","type":"text"},{"type":"codeVoice","code":"UIViewController"},{"text":", we","type":"text"},{"text":" ","type":"text"},{"text":"can use the conformances to this protocol to conditionally cast & traverse the contained screens to find","type":"text"},{"text":" ","type":"text"},{"text":"the inner ","type":"text"},{"type":"codeVoice","code":"wrappedScreen"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/SingleScreenContaining"},"sections":[],"metadata":{"title":"SingleScreenContaining","modules":[{"name":"WorkflowUI"}],"symbolKind":"protocol","navigatorTitle":[{"text":"SingleScreenContaining","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleScreenContaining","kind":"identifier"}],"roleHeading":"Protocol","externalID":"s:10WorkflowUI22SingleScreenContainingP"},"references":{"doc://WorkflowUI/documentation/WorkflowUI/SingleScreenContaining":{"navigatorTitle":[{"kind":"identifier","text":"SingleScreenContaining"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SingleScreenContaining"}],"identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/SingleScreenContaining","title":"SingleScreenContaining","abstract":[{"type":"text","text":"Defines a type that semantically ‘contains’ a "},{"type":"codeVoice","code":"Screen"},{"type":"text","text":" instance."}],"url":"\/documentation\/workflowui\/singlescreencontaining","kind":"symbol"},"doc://WorkflowUI/documentation/WorkflowUI/AnyScreen":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScreen","kind":"identifier"}],"title":"AnyScreen","type":"topic","role":"symbol","url":"\/documentation\/workflowui\/anyscreen","navigatorTitle":[{"text":"AnyScreen","kind":"identifier"}],"identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/AnyScreen","abstract":[]},"doc://WorkflowUI/documentation/WorkflowUI/SingleScreenContaining/primaryScreen":{"type":"topic","title":"primaryScreen","role":"symbol","kind":"symbol","url":"\/documentation\/workflowui\/singlescreencontaining\/primaryscreen","abstract":[{"type":"text","text":"The primary "},{"type":"codeVoice","code":"Screen"},{"type":"text","text":" the conforming type contains. Note that this may be ambiguous in some"},{"type":"text","text":" "},{"type":"text","text":"cases, for instance, if the conforming type logically contains multiple screens. Implementors should"},{"type":"text","text":" "},{"type":"text","text":"return the "},{"type":"codeVoice","code":"Screen"},{"type":"text","text":" which most appropriately reflects the ‘primary’ one for a given domain."}],"identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/SingleScreenContaining\/primaryScreen","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"primaryScreen"},{"kind":"text","text":": "},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Screen","preciseIdentifier":"s:10WorkflowUI6ScreenP"}],"required":true},"doc://WorkflowUI/documentation/WorkflowUI":{"url":"\/documentation\/workflowui","role":"collection","type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI","title":"WorkflowUI"},"doc://WorkflowUI/documentation/WorkflowUI/ScreenViewController":{"identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/ScreenViewController","kind":"symbol","navigatorTitle":[{"text":"ScreenViewController","kind":"identifier"}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"ScreenType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Screen"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/workflowui\/screenviewcontroller","title":"ScreenViewController","abstract":[{"text":"Generic base class that can be subclassed in order to to define a UI implementation that is powered by the","type":"text"},{"text":" ","type":"text"},{"text":"given screen type.","type":"text"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ScreenViewController","kind":"identifier"}]},"doc://WorkflowUI/documentation/WorkflowUI/SingleScreenContaining/findInnermostPrimaryScreen()":{"type":"topic","title":"findInnermostPrimaryScreen()","url":"\/documentation\/workflowui\/singlescreencontaining\/findinnermostprimaryscreen()","identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/SingleScreenContaining\/findInnermostPrimaryScreen()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"findInnermostPrimaryScreen","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:10WorkflowUI6ScreenP","text":"Screen","kind":"typeIdentifier"}],"abstract":[{"text":"Iteratively traverses a sequence of ","type":"text"},{"code":"primaryScreen","type":"codeVoice"},{"text":" values until one is found that does ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"conform to ","type":"text"},{"code":"SingleScreenContaining","type":"codeVoice"},{"text":". Put another way, this returns the first ","type":"text"},{"code":"primaryScreen","type":"codeVoice"},{"text":" ","type":"text"},{"text":"that is a ","type":"text"},{"code":"Screen","type":"codeVoice"},{"text":" and ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" a ","type":"text"},{"code":"SingleScreenContaining","type":"codeVoice"},{"text":" type.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://WorkflowUI/documentation/WorkflowUI/WorkflowHostingController":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ScreenType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Screen"},{"type":"text","text":", "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"WorkflowHostingController"}],"abstract":[{"type":"text","text":"Drives view controllers from a root Workflow."}],"url":"\/documentation\/workflowui\/workflowhostingcontroller","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WorkflowHostingController"}],"identifier":"doc:\/\/WorkflowUI\/documentation\/WorkflowUI\/WorkflowHostingController","title":"WorkflowHostingController"}}}