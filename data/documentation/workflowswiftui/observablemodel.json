{"kind":"symbol","relationshipsSections":[{"type":"inheritedBy","identifiers":["doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/SingleActionModel"],"kind":"relationships","title":"Inherited By"},{"type":"conformingTypes","identifiers":["doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ActionModel","doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/StateAccessor"],"kind":"relationships","title":"Conforming Types"}],"abstract":[{"type":"text","text":"A type that can be observed for fine-grained changes and accept updates."}],"hierarchy":{"paths":[["doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"kind":"attribute","text":"@dynamicMemberLookup"},{"kind":"text","text":" "},{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableModel"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/State","kind":"typeIdentifier","text":"State","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelP5StateQa"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Workflows that render ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel"},{"text":" types can be used to power ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableScreen"},{"text":" ","type":"text"},{"text":"screens, for performant UI that only updates when necessary, while still adhering to a","type":"text"},{"text":" ","type":"text"},{"text":"unidirectional data flow.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To render an ","type":"text"},{"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel","isActive":true,"type":"reference"},{"text":", your Workflow state must first conform to ","type":"text"},{"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableState","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"code":"@ObservableState","type":"codeVoice"},{"text":" macro.","type":"text"}]},{"text":"Examples","anchor":"Examples","type":"heading","level":1},{"type":"paragraph","inlineContent":[{"text":"For trivial workflows with no actions, you can generate a model directly from your state:","type":"text"}]},{"type":"codeListing","code":["struct TrivialWorkflow: Workflow {","    typealias Output = Never","","    @ObservableState","    struct State {","        var counter = 0","    }","","    func makeInitialState() -> State {","        .init()","    }","","    func render(","        state: State,","        context: RenderContext<Self>","    ) -> StateAccessor<State> {","        context.makeStateAccessor(state: state)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For simple workflows with a single action, you can generate a model from your state and action:"}]},{"type":"codeListing","code":["struct SingleActionWorkflow: Workflow {","    typealias Output = Never","","    @ObservableState","    struct State {","        var counter = 0","    }","","    enum Action: WorkflowAction {","        typealias WorkflowType = SingleActionWorkflow","        case increment","","        func apply(toState state: inout State) -> Never? {","            state.counter += 1","            return nil","        }","    }","","    func makeInitialState() -> State {","        .init()","    }","","    func render(","        state: State,","        context: RenderContext<Self>","    ) -> ActionModel<State, Action> {","        context.makeActionModel(state: state)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For complex workflows that have multiple actions or compose observable models from child","type":"text"},{"text":" ","type":"text"},{"text":"workflows, you can create a custom model that conforms to ","type":"text"},{"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel","isActive":true,"type":"reference"},{"text":":","type":"text"}]},{"type":"codeListing","code":["struct ComplexWorkflow: Workflow {","    typealias Output = Never","","    @ObservableState","    struct State {","        var counter = 0","    }","","    enum UpAction: WorkflowAction {","        typealias WorkflowType = ComplexWorkflow","        case increment","","        func apply(toState state: inout State) -> Never? {","            state.counter += 1","            return nil","        }","    }","","    enum DownAction: WorkflowAction {","        typealias WorkflowType = ComplexWorkflow","        case decrement","","        func apply(toState state: inout State) -> Never? {","            state.counter -= 1","            return nil","        }","    }","","    func makeInitialState() -> State {","        .init()","    }","","    func render(","        state: State,","        context: RenderContext<Self>","    ) -> CustomModel {","        CustomModel(","            accessor: context.makeStateAccessor(state: state),","            child: TrivialWorkflow().rendered(in: context),","            up: context.makeSink(of: UpAction.self),","            down: context.makeSink(of: DownAction.self)","        )","    }","}","","struct CustomModel: ObservableModel {","    var accessor: StateAccessor<ComplexWorkflow.State>","","    var child: TrivialWorkflow.Rendering","","    var up: Sink<ComplexWorkflow.UpAction>","    var down: Sink<ComplexWorkflow.DownAction>","}"],"syntax":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"ObservableModel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableModel"}],"navigatorTitle":[{"text":"ObservableModel","kind":"identifier"}],"roleHeading":"Protocol","symbolKind":"protocol","modules":[{"name":"WorkflowSwiftUI"}],"externalID":"s:15WorkflowSwiftUI15ObservableModelP","role":"symbol"},"topicSections":[{"anchor":"Associated-Types","identifiers":["doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/State"],"generated":true,"title":"Associated Types"},{"anchor":"Instance-Properties","identifiers":["doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/accessor"],"generated":true,"title":"Instance Properties"},{"anchor":"Subscripts","identifiers":["doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/subscript(dynamicMember:)-2wc15","doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/subscript(dynamicMember:)-58564"],"generated":true,"title":"Subscripts"}],"identifier":{"url":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/workflowswiftui\/observablemodel"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/SingleActionModel":{"navigatorTitle":[{"text":"SingleActionModel","kind":"identifier"}],"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/SingleActionModel","url":"\/documentation\/workflowswiftui\/singleactionmodel","abstract":[{"text":"An observable model with a single action.","type":"text"}],"type":"topic","title":"SingleActionModel","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SingleActionModel","kind":"identifier"}]},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableModel":{"kind":"symbol","title":"ObservableModel","role":"symbol","abstract":[{"text":"A type that can be observed for fine-grained changes and accept updates.","type":"text"}],"navigatorTitle":[{"text":"ObservableModel","kind":"identifier"}],"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel","url":"\/documentation\/workflowswiftui\/observablemodel","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableModel","kind":"identifier"}]},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableModel/subscript(dynamicMember:)-2wc15":{"type":"topic","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelPAAE13dynamicMemberqd__s15WritableKeyPathCy5StateQzqd__G_tcluip1TL_qd__mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelPAAE13dynamicMemberqd__s15WritableKeyPathCy5StateQzqd__G_tcluip1TL_qd__mfp"}],"title":"subscript(dynamicMember:)","role":"symbol","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/subscript(dynamicMember:)-2wc15","url":"\/documentation\/workflowswiftui\/observablemodel\/subscript(dynamicmember:)-2wc15","kind":"symbol","abstract":[{"text":"Allows dynamic member lookup to read and write state through the accessor.","type":"text"}]},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/StateAccessor":{"navigatorTitle":[{"text":"StateAccessor","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}]},"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/StateAccessor","abstract":[{"text":"A wrapper around observable state that provides read and write access through unidirectional","type":"text"},{"text":" ","type":"text"},{"text":"channels.","type":"text"}],"type":"topic","url":"\/documentation\/workflowswiftui\/stateaccessor","title":"StateAccessor","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateAccessor","kind":"identifier"}],"kind":"symbol"},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableScreen":{"type":"topic","abstract":[{"text":"A screen that renders SwiftUI views with an observable model for fine-grained invalidations.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableScreen","kind":"identifier"}],"role":"symbol","title":"ObservableScreen","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableScreen","navigatorTitle":[{"text":"ObservableScreen","kind":"identifier"}],"url":"\/documentation\/workflowswiftui\/observablescreen"},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableModel/accessor":{"type":"topic","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/accessor","kind":"symbol","required":true,"url":"\/documentation\/workflowswiftui\/observablemodel\/accessor","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"accessor","kind":"identifier"},{"text":": ","kind":"text"},{"text":"StateAccessor","preciseIdentifier":"s:15WorkflowSwiftUI13StateAccessorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelP5StateQa","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"The accessor that can be used to read and write state.","type":"text"}],"role":"symbol","title":"accessor"},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI":{"url":"\/documentation\/workflowswiftui","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI","title":"WorkflowSwiftUI","kind":"symbol","role":"collection","type":"topic","abstract":[]},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableModel/State":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"ObservableState","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableStateP","kind":"typeIdentifier"}],"url":"\/documentation\/workflowswiftui\/observablemodel\/state","title":"State","abstract":[{"text":"The associated state type that this model observes.","type":"text"}],"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/State","required":true},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ActionModel":{"kind":"symbol","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ActionModel","role":"symbol","navigatorTitle":[{"text":"ActionModel","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ActionModel","kind":"identifier"}],"abstract":[{"text":"An ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel"},{"text":" for workflows with a single action.","type":"text"}],"type":"topic","title":"ActionModel","url":"\/documentation\/workflowswiftui\/actionmodel"},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableModel/subscript(dynamicMember:)-58564":{"role":"symbol","title":"subscript(dynamicMember:)","kind":"symbol","abstract":[{"text":"Allows dynamic member lookup to read state through the accessor.","type":"text"}],"fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelP5StateQa"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelPAAE13dynamicMemberqd__s7KeyPathCy5StateQzqd__G_tcluip1TL_qd__mfp"},{"text":">) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:15WorkflowSwiftUI15ObservableModelPAAE13dynamicMemberqd__s7KeyPathCy5StateQzqd__G_tcluip1TL_qd__mfp"}],"identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableModel\/subscript(dynamicMember:)-58564","url":"\/documentation\/workflowswiftui\/observablemodel\/subscript(dynamicmember:)-58564","type":"topic"},"doc://WorkflowSwiftUI/documentation/WorkflowSwiftUI/ObservableState":{"url":"\/documentation\/workflowswiftui\/observablestate","role":"symbol","identifier":"doc:\/\/WorkflowSwiftUI\/documentation\/WorkflowSwiftUI\/ObservableState","kind":"symbol","navigatorTitle":[{"text":"ObservableState","kind":"identifier"}],"type":"topic","title":"ObservableState","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"}]}}}